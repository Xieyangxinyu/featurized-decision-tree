method = c("matern"),
p = 1:2,
int_effect = seq(0, 1, .1),
mode = c("loocv"),
strategy = c("stack"),
beta = "1",
test = c("boot"),
altKern = "ensemble",
intType = 1,
corType = 2,
d = 3)
setting_total10$l <- setting_total10$p / 2
B4 <- rbind(setting_total1, setting_total2, setting_total3,
setting_total4, setting_total5, setting_total6,
setting_total7, setting_total8, setting_total9,
setting_total10)
setting_total <- rbind(A1, A2, A3, A4, A5, B1, B2, B3, B4)
write.table(setting_total, "settings.txt",
sep = ",", row.names = FALSE)
# remove previous bash script
file_handle <- "command_exec"
file_names <-
grep(file_handle, list.files(), value = TRUE)
file_names_bkp <-
paste0("./", file_names)
for (name in c(file_names, file_names_bkp)){
file.remove(name)
}
# generate cluster bash script
n_run_per_worker <- 1
n_exec <-
ceiling(nrow(setting_total) / (n_run_per_worker * 1e3))
cluster_type <- c("SLURM", "LSF")[1]
for (exec_id in 1:n_exec) {
n_rask_rest <-
min(nrow(setting_total)/n_run_per_worker -
(exec_id-1)*1e3, 1e3)
if (cluster_type == "SLURM"){
string <-
paste0(
"#!/bin/bash
#SBATCH --array=", (exec_id-1) * 1e3 + 1,
"-", (exec_id-1) * 1e3 + n_rask_rest,
"	    		#job array list goes 1,2,3...n
#SBATCH -c 1
#SBATCH -N 1
#SBATCH -t 0-12:00			#job run 12 hour
#SBATCH -p short			#submit to 'short' queue
#SBATCH --mem=6370  		# use 4 GB memory
#SBATCH -o %A_%a.out
#SBATCH -e %A_%a.err
#SBATCH --mail-type=END      #Type of email notification
#SBATCH --mail-user=wdeng@g.harvard.edu
Rscript './simMaster.R' ${SLURM_ARRAY_TASK_ID}"
)
} else if (cluster_type == "LSF"){
string <-
paste0(
"#!/bin/bash
#BSUB -q short					#submit to 'short' queue
#BSUB -n 1						#each  job run on 1 core
#BSUB -W 12:00					#job run 12 hour
#BSUB -J jobArray[", (exec_id-1) * 1e3 + 1,
"-", (exec_id-1) * 1e3 + n_rask_rest,
"]		#job array list goes 1,2,3...n
#BSUB -o './log/out_%I.txt' 			#lsf output file
#BSUB -e './log/err_%I.txt' 			#lsf error file
#BSUB -R 'rusage[mem=4096]'		#use 4GB memory
Rscript './simMaster.R' $LSB_JOBINDEX"
)
}
write(string, file = paste0("command_exec", exec_id, ".sh"))
write(string, file = paste0("./command_exec", exec_id, ".sh"))
}
?rgamma
qgamma(.1, 10, rate = 2)
qgamma(.1, 10, rate = 2, lower.tail = FALSE)
sqrt(10.24)
2.3+2.5+3.2
pgamma(8, 10, rate = 2, lower.tail = FALSE)
f(n) <- function(n) {
exp(- log(n) * n^(1 / 4)) + 18 * exp(-sqrt(log(n)) * n^(-1 / 8 ))
}
f <- function(n) {
exp(- log(n) * n^(1 / 4)) + 18 * exp(-sqrt(log(n)) * n^(-1 / 8 ))
}
n <- exp(1:10)
f(n)
n <- exp(1:100)
f(n)
library(readxl)
X1_29_State_Data <- read_excel("Desktop/1-29 State Data.xlsx",
skip = 1)
View(X1_29_State_Data)
file <- X1_29_State_Data
View(file)
names(file)
?cor
cor(file$`Perc Overall`, file$`Deaths/100,000`)
class(file$`Deaths/100,000`)
y <- as.numeric(file$`Deaths/100,000`)
cor(x, y)
x <- file$`Perc Overall`
y <- as.numeric(file$`Deaths/100,000`)
cor(x, y)
cor(x, y, na.rm = TRUE)
cor(x, y, use = "pairwise.complete.obs")
cor(x, y, use = "pairwise.complete.obs", method = "kendall")
cor(x, y, use = "pairwise.complete.obs", method = "spearman")
?cor.test
cor.test(x, y)
lm(y ~ x)
lm(x ~ y)
names(file)
lm(Deaths/100,000 ~ ., data = file)
names(file) <- paste0("x", seq(20))
names(file)
lm(x20 ~ ., data = file)
lm(x20 ~ x1 + x2, data = file)
lm(x20 ~ x15 + x16, data = file)
fit <- lm(x20 ~ x15 + x16, data = file)
summary(fit)
f <- function(a, alpha, gamma) {
((a / alpha) * exp(1 - a / alpha)) ^ (alpha^2 / gamma)
}
a <- 7
alpha <- seq(2, 10, .5)
gamma <- 4
f(a, alpha, gamma)
y <- f(a, alpha, gamma)
plot(alpha, y)
alpha <- seq(0, 20, .5)
gamma <- 4
y <- f(a, alpha, gamma)
plot(alpha, y)
alpha <- seq(0, 20, .2)
gamma <- 4
y <- f(a, alpha, gamma)
plot(alpha, y)
gamma <- 2 * alpha
y <- f(a, alpha, gamma)
plot(alpha, y)
a <- 70
y <- f(a, alpha, gamma)
plot(alpha, y)
a <- 1
alpha <- seq(0, 20, .2)
gamma <- 2 * alpha
y <- f(a, alpha, gamma)
plot(alpha, y)
install.packages("amelia")
install.packages("Amelia")
library(Amelia)
View(f)
plot(alpha, y)
library(ggplot2)
library(dplyr)
library(reshape2)
file <- read.csv("/Users/irisdeng/Desktop/graduate/research/CVEK_cont/simu_jss/plots_main_lxx/sim_result.csv", header = TRUE)
View(file)
colnames(file) <- c("method", "p", "l", "int_effect", "tuning", "strategy",
"beta", "test", "altKern", "intType", "Library", "power")
file <- as.data.frame(file)
file$data_type <- ifelse(file$method == "polynomial" & file$p == 1, "linear",
ifelse(file$method == "polynomial" & file$p == 2 & file$intType == 1, "quadratic",
ifelse(file$method == "polynomial" & file$p == 3, "cubic",
ifelse(file$method == "polynomial" & file$p == 2 & file$intType == 2, "quadratic_rbf",
ifelse(file$method == "rbf" & file$p == 1 & file$intType == 1, "rbf_0.5",
ifelse(file$method == "rbf" & file$p == 2, "rbf_1",
ifelse(file$method == "rbf" & file$p == 1 & file$intType == 3, "rbf_lnr_0.5",
ifelse(file$method == "matern" & file$p == 1,
"matern_1.5_0.5", "matern_2.5_1"))))))))
file$Library <- as.numeric(as.character(file$Library))
file$Library[which(file$Library == 1)] <- "Oracle"
file$Library[which(file$Library == 2)] <- "Polynomial"
file$Library[which(file$Library == 3)] <- "RBF"
file$Library[which(file$Library == 4)] <- "Polynomial+RBF"
file$data_type <- factor(file$data_type, order = T,
levels = c('linear', 'quadratic', 'cubic',
"quadratic_rbf", "rbf_0.5", "rbf_1",
"rbf_lnr_0.5", "matern_1.5_0.5", "matern_2.5_1"))
file$Library <- factor(file$Library, order = T,
levels = c("Oracle", "Polynomial", "RBF", "Polynomial+RBF"))
file$type <- ifelse(file$test == "asymp" & file$altKern == "linear", "lnr_asymp",
ifelse(file$test == "boot" & file$altKern == "linear", "lnr_boot", "ens_boot"))
file$type <- factor(file$type, order = T, levels = c("lnr_asymp", "lnr_boot", "ens_boot"))
file <- filter(file, !data_type %in% c("cubic", "quadratic_rbf", "rbf_lnr_0.5"))
file$data_type <- factor(file$data_type, order = T,
levels = c('linear', 'quadratic', "rbf_1", "rbf_0.5",
"matern_1.5_0.5", "matern_2.5_1"))
## plot 1
file1 <- filter(file, tuning == "loocv" & strategy == "stack" & type == "lnr_boot")
library_plot <- ggplot(data = file1, aes(x = int_effect, y = power, color = Library))+
scale_colour_manual(values = c("red", "darkgreen", "blue", "pink")) +
geom_line() + facet_wrap(~ data_type, ncol = 3) + geom_hline(yintercept = 0.05) +
labs(x = expression(paste('interaction strength, ', delta)), y = 'power') +
geom_point(size = .5) + theme_set(theme_bw()) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12)) + theme(legend.position = "top") +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
library_plot
library_plot <- ggplot(data = file1, aes(x = int_effect, y = power, color = Library))+
scale_colour_manual(values = c("red", "darkgreen", "blue", "pink")) +
geom_line() + facet_wrap(~ data_type, ncol = 3) + geom_hline(yintercept = 0.05) +
labs(x = expression(paste('interaction strength, ', delta)), y = 'power') +
geom_point(size = .5) + theme_set(theme_bw()) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12)) + theme(legend.position = "top") +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
library_plot
ggsave(paste0("/Users/irisdeng/Desktop/graduate/PhD_progress/oral/Oral_Wenying/plot/library_plot.pdf"), library_plot, width = 10, height = 7)
ggsave(paste0("/Users/irisdeng/Desktop/graduate/PhD_progress/oral/Oral_Wenying/plot/library_plot.pdf"), library_plot, width = 10, height = 5)
## plot 2
file2 <- filter(file, tuning == "loocv" & strategy == "stack" & Library == "RBF")
type_plot <- ggplot(data = file2, aes(x = int_effect, y = power, color = type))+
scale_colour_manual(values = c("red", "blue", "darkgreen")) +
geom_line() + facet_wrap(~ data_type, ncol = 3) + geom_hline(yintercept = 0.05) +
labs(x = expression(paste('interaction strength, ', delta)), y = 'power') +
geom_point(size = .5) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12)) + theme(legend.position = "top") +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
type_plot
file2 <- filter(file2, !type == "ens_boot")
type_plot <- ggplot(data = file2, aes(x = int_effect, y = power, color = type))+
scale_colour_manual(values = c("red", "blue", "darkgreen")) +
geom_line() + facet_wrap(~ data_type, ncol = 3) + geom_hline(yintercept = 0.05) +
labs(x = expression(paste('interaction strength, ', delta)), y = 'power') +
geom_point(size = .5) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12)) + theme(legend.position = "top") +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
type_plot
View(file2)
file2$type <- ifelse(file2$type == "lnr_asymp", "standard CVEK", "ours")
file2$type <- factor(file2$type, order = T, levels = c("standard CVEK", "ours"))
names(file2)[8] <- "dd"
names(file2)[14] <- "test"
type_plot <- ggplot(data = file2, aes(x = int_effect, y = power, color = type))+
scale_colour_manual(values = c("red", "blue", "darkgreen")) +
geom_line() + facet_wrap(~ data_type, ncol = 3) + geom_hline(yintercept = 0.05) +
labs(x = expression(paste('interaction strength, ', delta)), y = 'power') +
geom_point(size = .5) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12)) + theme(legend.position = "top") +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
type_plot
type_plot <- ggplot(data = file2, aes(x = int_effect, y = power, color = test))+
scale_colour_manual(values = c("red", "blue")) +
geom_line() + facet_wrap(~ data_type, ncol = 3) + geom_hline(yintercept = 0.05) +
labs(x = expression(paste('interaction strength, ', delta)), y = 'power') +
geom_point(size = .5) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12)) + theme(legend.position = "top") +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
type_plot
ggsave(paste0("/Users/irisdeng/Desktop/graduate/PhD_progress/oral/Oral_Wenying/plot/type_plot.pdf"), type_plot, width = 10, height = 5)
## plot 3
file3 <- filter(file, strategy == "stack"  &  Library == "RBF" & type == "lnr_boot")
tuning_plot <- ggplot(data = file3, aes(x = int_effect, y = power, color = tuning))+
scale_colour_manual(values = c("red", "darkgreen", "purple", "pink",
"yellow", "lightgreen", "blue")) +
geom_line() + facet_wrap(~ data_type, ncol = 3) + geom_hline(yintercept = 0.05) +
labs(x = expression(paste('interaction strength, ', delta)), y = 'power') +
geom_point(size = .5) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12)) + theme(legend.position = "top") +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
ggsave(paste0("/Users/irisdeng/Desktop/graduate/PhD_progress/oral/Oral_Wenying/plot/tuning_plot.pdf"), tuning_plot, width = 10, height = 5)
## plot 4
file4 <- filter(file, tuning == "loocv"  &  Library == "RBF" & type == "lnr_boot")
strategy_plot <- ggplot(data = file4, aes(x = int_effect, y = power, color = strategy))+
scale_colour_manual(values = c("red", "darkgreen", "blue")) +
geom_line() + facet_wrap(~ data_type, ncol = 3) + geom_hline(yintercept = 0.05) +
labs(x = expression(paste('interaction strength, ', delta)), y = 'power') +
geom_point(size = .5) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12)) + theme(legend.position = "top") +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
ggsave(paste0("/Users/irisdeng/Desktop/graduate/PhD_progress/oral/Oral_Wenying/plot/strategy_plot.pdf"), strategy_plot, width = 10, height = 5)
?quantile
quantile(1:100)
0.25*101
0.25/101
0.25*101
0.75*101
qnorm(0.995)
qnorm(0.975)
qnorm(0.95)
qnorm(0.90)
data <- read.csv("/Users/irisdeng/Downloads/results.csv")
View(data)
data <- read.csv("/Users/irisdeng/Downloads/results.csv", header = FALSE)
View(data)
?read.csv
file <- data[complete.casesdata), ]
file <- data[complete.cases(data), ]
View(file)
data <- read.csv("/Users/irisdeng/Downloads/results.csv", header = FALSE)
View(data)
sleep_for_a_minute <- function() { Sys.sleep(60) }
start_time <- Sys.time()
sleep_for_a_minute()
end_time <- Sys.time()
end_time - start_time
sleep_for_a_minute <- function() { Sys.sleep(2) }
start_time <- Sys.time()
sleep_for_a_minute()
end_time <- Sys.time()
end_time - start_time
setwd("/Users/irisdeng/Desktop/psi_comparison/uq/experiments/expr")
# library(ranger)
library(randomForest)
library(knockoff)
library(BNN)
library(pROC)
library(dplyr)
filename <- paste0("data=", name, "_n=", n, "_dim=", dim, "_i=", i)
data <- read.csv(paste0("datasets/snr2_l1/", name, "_n", n, "_d", dim, "_i", i, ".csv"),
row.names = 1)
name = "rbf"
n=2000
dim=150
i=0
filename <- paste0("data=", name, "_n=", n, "_dim=", dim, "_i=", i)
data <- read.csv(paste0("datasets/snr2_l1/", name, "_n", n, "_d", dim, "_i", i, ".csv"),
row.names = 1)
df_train <- data[1:n, ]
x_train <- df_train[, -1] %>% as.matrix
y_train <- df_train[, 1]
df_test <- data[(n+1):nrow(data), ]
x_test <- df_test[, -1] %>% as.matrix
y_test <- df_test[, 1]
true <- c(rep(1, 5), rep(0, dim - 5))
start_time <- Sys.time()
res_rf <- randomForest(y ~ ., data = df_train, importance = TRUE)
end_time <- Sys.time()
rf_time <- end_time - start_time
rf_time
difftime(end_time, start_time, units = "secs")[[1]]
difftime(end_time, start_time, units = "secs")
rf_time <- difftime(end_time, start_time, units = "secs")[[1]]
rf_rmse <- predict(res_rf, x_test)
pred <- predict(res_rf, x_test)
rf_rmse <- sqrt(mean((y_test - pred) ^ 2))
rf_est <- res_rf$importance[, 2]
rf_est <- rf_est / max(rf_est)
rf_auc <- auc(roc(true, rf_est))
rf_auc
rf_est
View(data)
dd = data[1:100, 1:10]
View(dd)
ss = dd[, -c(1, 2)]
View(ss)
ss = dd[, 2]
library(bkmr)
library(BGLR)
df_train <- data[1:n, ]
x_train <- df_train[, -c(1, 2)] %>% as.matrix
y_train <- df_train[, 2]
f_train <- df_train[, 1]
df_test <- data[(n+1):nrow(data), ]
x_test <- df_test[, -c(1, 2)] %>% as.matrix
y_test <- df_test[, 2]
f_test <- df_test[, 1]
true <- c(rep(1, 5), rep(0, dim - 5))
# knockoff
start_time <- Sys.time()
knock_rf <- knockoff.filter(x_train, y_train,
statistic = stat.random_forest,
fdr = 0.5)
end_time <- Sys.time()
knock_time <- difftime(end_time, start_time, units = "secs")[[1]]
knock_est <- knock_rf$statistic
knock_est <- knock_est - min(knock_est)
knock_est <- knock_est / max(knock_est)
knock_auc <- auc(roc(true, knock_est))
data <- read.csv("/Users/irisdeng/Desktop/data/linear_n100_d25_i0.csv", row.names = 1)
df_train <- data[1:n, ]
n=100
dim=25
df_train <- data[1:n, ]
x_train <- df_train[, -c(1, 2)] %>% as.matrix
y_train <- df_train[, 2]
f_train <- df_train[, 1]
df_test <- data[(n+1):nrow(data), ]
x_test <- df_test[, -c(1, 2)] %>% as.matrix
y_test <- df_test[, 2]
f_test <- df_test[, 1]
true <- c(rep(1, 5), rep(0, dim - 5))
# random forest
start_time <- Sys.time()
res_rf <- randomForest(y ~ ., data = df_train, importance = TRUE)
end_time <- Sys.time()
rf_time <- difftime(end_time, start_time, units = "secs")[[1]]
pred <- predict(res_rf, x_test)
pred <- predict(res_rf, x_test)
View(df_train)
View(df_train)
df_train <- df_train[, -1]
View(df_train)
df_test <- df_test[, -1]
res_rf <- randomForest(y ~ ., data = df_train, importance = TRUE)
pred <- predict(res_rf, x_test)
rf_rmse <- sqrt(mean((y_test - pred) ^ 2))
rf_mse <- mean((pred - f_test)^2) / mean((f_test - mean(f_test))^2)
rf_est <- res_rf$importance[, 2]
rf_est <- rf_est / max(rf_est)
rf_auc <- auc(roc(true, rf_est))
# knockoff
start_time <- Sys.time()
knock_rf <- knockoff.filter(x_train, y_train,
statistic = stat.random_forest,
fdr = 0.5)
end_time <- Sys.time()
knock_time <- difftime(end_time, start_time, units = "secs")[[1]]
knock_est <- knock_rf$statistic
knock_est <- knock_est - min(knock_est)
knock_est <- knock_est / max(knock_est)
knock_auc <- auc(roc(true, knock_est))
# bnn
bnn_res <- BNNsel(x_train, y_train, train_num = as.integer(0.95 * length(y_train)),
total_iteration = 5000)
View(bnn_res)
# bnn
start_time <- Sys.time()
bnn_res <- BNNsel(x_train, y_train, train_num = as.integer(0.95 * length(y_train)),
total_iteration = 5000)
end_time <- Sys.time()
bnn_time <- difftime(end_time, start_time, units = "secs")[[1]]
bnn_auc <- auc(roc(true, bnn_res$mar[-1]))
# bkmr
start_time <- Sys.time()
fitkm <- kmbayes(y = y_train, Z = x_train, iter = 1000,
verbose = FALSE, varsel = TRUE)
end_time <- Sys.time()
bkmr_time <- difftime(end_time, start_time, units = "secs")[[1]]
res_bkmr <- ExtractPIPs(fitkm)
bkmr_auc <- auc(roc(true, res_bkmr$PIP))
# bakr
start_time <- Sys.time()
Kn <- ApproxGaussKernel(t(x_train), dim, dim)
# Bayesian Ridge Regression
start_time <- Sys.time()
ETA <- list(list(X = x_train, model = "BRR"))
reg.BRR <- BGLR(y = y_train, ETA = ETA, nIter = mcmc.iter,
burnIn = mcmc.burn, verbose = FALSE)
end_time <- Sys.time()
brr_time <- difftime(end_time, start_time, units = "secs")[[1]]
mcmc.iter <- 2e3
mcmc.burn <- 1e3
reg.BRR <- BGLR(y = y_train, ETA = ETA, nIter = mcmc.iter,
burnIn = mcmc.burn, verbose = FALSE)
end_time <- Sys.time()
brr_time <- difftime(end_time, start_time, units = "secs")[[1]]
brr_beta <- reg.BRR$ETA[[1]]$b
pred <- x_test %*% brr_beta
brr_rmse <- sqrt(mean((y_test - pred) ^ 2))
brr_mse <- mean((pred - f_test)^2) / mean((f_test - mean(f_test))^2)
psi_brr <- brr_beta^2
psi_brr <- psi_brr / max(psi_brr)
brr_auc <- auc(roc(true, psi_brr))
# Bayesian LMM
start_time <- Sys.time()
K <- x_train %*% t(x_train)
ETA <- list(list(K = K, model = "RKHS"))
reg.BBLUP <- BGLR(y = y_train, ETA = ETA, nIter = mcmc.iter,
burnIn = mcmc.burn, verbose = FALSE)
reg.BBLUP_b <- ginv(x_train) %*% reg.BBLUP$ETA[[1]]$u
library(monomvn)
reg.BBLUP_b <- ginv(x_train) %*% reg.BBLUP$ETA[[1]]$u
end_time <- Sys.time()
bblup_time <- difftime(end_time, start_time, units = "secs")[[1]]
pred <- x_test %*% reg.BBLUP_b
bblup_rmse <- sqrt(mean((y_test - pred) ^ 2))
bblup_mse <- mean((pred - f_test)^2) / mean((f_test - mean(f_test))^2)
psi_bblup <- reg.BBLUP_b^2
psi_bblup <- psi_bblup / max(psi_bblup)
bblup_auc <- auc(roc(true, psi_bblup[, 1]))
# Bayesian lasso
start_time <- Sys.time()
ETA <- list(list(X = x_train, model = "BL"))
reg.BL <- BGLR(y = y_train, ETA = ETA, nIter = mcmc.iter,
burnIn = mcmc.burn, verbose = FALSE)
end_time <- Sys.time()
bl_time <- difftime(end_time, start_time, units = "secs")[[1]]
BL_beta <- reg.BL$ETA[[1]]$b
pred <- x_test %*% BL_beta
bl_rmse <- sqrt(mean((y_test - pred) ^ 2))
bl_mse <- mean((pred - f_test)^2) / mean((f_test - mean(f_test))^2)
psi_bl <- BL_beta^2
psi_bl <- psi_bl / max(psi_bl)
bl_auc <- auc(roc(true, psi_bl))
75*20
dd = read.csv("/Users/irisdeng/Desktop/psi_comparison/R_methods/settings.txt")
